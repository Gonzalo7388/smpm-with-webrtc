{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport RTCRtcpParameters from \"./RTCRtcpParameters\";\nimport RTCRtpCodecParameters from \"./RTCRtpCodecParameters\";\nimport RTCRtpHeaderExtension from \"./RTCRtpHeaderExtension\";\nvar RTCRtpParameters = function () {\n  function RTCRtpParameters(init) {\n    _classCallCheck(this, RTCRtpParameters);\n    _defineProperty(this, \"codecs\", []);\n    _defineProperty(this, \"headerExtensions\", []);\n    _defineProperty(this, \"rtcp\", void 0);\n    for (var codec of init.codecs) {\n      this.codecs.push(new RTCRtpCodecParameters(codec));\n    }\n    for (var ext of init.headerExtensions) {\n      this.headerExtensions.push(new RTCRtpHeaderExtension(ext));\n    }\n    this.rtcp = new RTCRtcpParameters(init.rtcp);\n  }\n  return _createClass(RTCRtpParameters, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        codecs: this.codecs.map(function (c) {\n          return c.toJSON();\n        }),\n        headerExtensions: this.headerExtensions.map(function (he) {\n          return he.toJSON();\n        }),\n        rtcp: this.rtcp.toJSON()\n      };\n    }\n  }]);\n}();\nexport { RTCRtpParameters as default };","map":{"version":3,"names":["RTCRtcpParameters","RTCRtpCodecParameters","RTCRtpHeaderExtension","RTCRtpParameters","init","_classCallCheck","_defineProperty","codec","codecs","push","ext","headerExtensions","rtcp","_createClass","key","value","toJSON","map","c","he","default"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/RTCRtpParameters.ts"],"sourcesContent":["import RTCRtcpParameters, { RTCRtcpParametersInit } from './RTCRtcpParameters';\nimport RTCRtpCodecParameters, { RTCRtpCodecParametersInit } from './RTCRtpCodecParameters';\nimport RTCRtpHeaderExtension, { RTCRtpHeaderExtensionInit } from './RTCRtpHeaderExtension';\n\n\nexport interface RTCRtpParametersInit {\n    codecs: RTCRtpCodecParametersInit[],\n    headerExtensions: RTCRtpHeaderExtensionInit[],\n    rtcp: RTCRtcpParametersInit\n}\n\nexport default class RTCRtpParameters {\n    readonly codecs: RTCRtpCodecParameters[] = [];\n    readonly headerExtensions: RTCRtpHeaderExtension[] = [];\n    readonly rtcp: RTCRtcpParameters;\n\n    constructor(init: RTCRtpParametersInit) {\n        for (const codec of init.codecs) {\n            this.codecs.push(new RTCRtpCodecParameters(codec));\n        }\n\n        for (const ext of init.headerExtensions) {\n            this.headerExtensions.push(new RTCRtpHeaderExtension(ext));\n        }\n\n        this.rtcp = new RTCRtcpParameters(init.rtcp);\n    }\n\n    toJSON(): RTCRtpParametersInit {\n        return {\n            codecs: this.codecs.map(c => c.toJSON()),\n            headerExtensions: this.headerExtensions.map(he => he.toJSON()),\n            rtcp: this.rtcp.toJSON()\n        };\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,iBAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,qBAAP;AAAA,IASqBC,gBAAN;EAKX,SAAAA,iBAAYC,IAAD,EAA6B;IAAAC,eAAA,OAAAF,gBAAA;IAAAG,eAAA,iBAJG,EAIH;IAAAA,eAAA,2BAHa,EAGb;IAAAA,eAAA;IACpC,KAAK,IAAMC,KAAX,IAAoBH,IAAI,CAACI,MAAzB,EAAiC;MAC7B,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAIR,qBAAJ,CAA0BM,KAA1B,CAAjB;IACH;IAED,KAAK,IAAMG,GAAX,IAAkBN,IAAI,CAACO,gBAAvB,EAAyC;MACrC,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAAIP,qBAAJ,CAA0BQ,GAA1B,CAA3B;IACH;IAED,KAAKE,IAAL,GAAY,IAAIZ,iBAAJ,CAAsBI,IAAI,CAACQ,IAA3B,CAAZ;EACH;EAAA,OAAAC,YAAA,CAAAV,gBAAA;IAAAW,GAAA;IAAAC,KAAA,EAED,SAAAC,MAAMA,CAAA,EAAyB;MAC3B,OAAO;QACHR,MAAM,EAAE,KAAKA,MAAL,CAAYS,GAAZ,CAAgB,UAAAC,CAAC;UAAA,OAAIA,CAAC,CAACF,MAAF,EAArB;QAAA,EADL;QAEHL,gBAAgB,EAAE,KAAKA,gBAAL,CAAsBM,GAAtB,CAA0B,UAAAE,EAAE;UAAA,OAAIA,EAAE,CAACH,MAAH,EAAhC;QAAA,EAFf;QAGHJ,IAAI,EAAE,KAAKA,IAAL,CAAUI,MAAV;MAHH,CAAP;IAKH;EAAA;AAAA;AAAA,SAvBgBb,gBAAN,IAAAiB,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}