{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as base64 from 'base64-js';\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { addListener, removeListener } from \"./EventEmitter\";\nimport MessageEvent from \"./MessageEvent\";\nimport RTCDataChannelEvent from \"./RTCDataChannelEvent\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar DATA_CHANNEL_EVENTS = ['open', 'message', 'bufferedamountlow', 'closing', 'close', 'error'];\nvar RTCDataChannel = function (_defineCustomEventTar) {\n  function RTCDataChannel(info) {\n    var _this;\n    _classCallCheck(this, RTCDataChannel);\n    _this = _callSuper(this, RTCDataChannel);\n    _defineProperty(_this, \"_peerConnectionId\", void 0);\n    _defineProperty(_this, \"_reactTag\", void 0);\n    _defineProperty(_this, \"_bufferedAmount\", void 0);\n    _defineProperty(_this, \"_id\", void 0);\n    _defineProperty(_this, \"_label\", void 0);\n    _defineProperty(_this, \"_maxPacketLifeTime\", void 0);\n    _defineProperty(_this, \"_maxRetransmits\", void 0);\n    _defineProperty(_this, \"_negotiated\", void 0);\n    _defineProperty(_this, \"_ordered\", void 0);\n    _defineProperty(_this, \"_protocol\", void 0);\n    _defineProperty(_this, \"_readyState\", void 0);\n    _defineProperty(_this, \"binaryType\", 'arraybuffer');\n    _defineProperty(_this, \"bufferedAmountLowThreshold\", 0);\n    _this._peerConnectionId = info.peerConnectionId;\n    _this._reactTag = info.reactTag;\n    _this._bufferedAmount = 0;\n    _this._label = info.label;\n    _this._id = info.id === -1 ? null : info.id;\n    _this._ordered = Boolean(info.ordered);\n    _this._maxPacketLifeTime = info.maxPacketLifeTime;\n    _this._maxRetransmits = info.maxRetransmits;\n    _this._protocol = info.protocol || '';\n    _this._negotiated = Boolean(info.negotiated);\n    _this._readyState = info.readyState;\n    _this._registerEvents();\n    return _this;\n  }\n  _inherits(RTCDataChannel, _defineCustomEventTar);\n  return _createClass(RTCDataChannel, [{\n    key: \"bufferedAmount\",\n    get: function get() {\n      return this._bufferedAmount;\n    }\n  }, {\n    key: \"label\",\n    get: function get() {\n      return this._label;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"ordered\",\n    get: function get() {\n      return this._ordered;\n    }\n  }, {\n    key: \"maxPacketLifeTime\",\n    get: function get() {\n      return this._maxPacketLifeTime;\n    }\n  }, {\n    key: \"maxRetransmits\",\n    get: function get() {\n      return this._maxRetransmits;\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      return this._protocol;\n    }\n  }, {\n    key: \"negotiated\",\n    get: function get() {\n      return this._negotiated;\n    }\n  }, {\n    key: \"readyState\",\n    get: function get() {\n      return this._readyState;\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      if (typeof data === 'string') {\n        WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, data, 'text');\n        return;\n      }\n      if (ArrayBuffer.isView(data)) {\n        data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n      } else if (data instanceof ArrayBuffer) {\n        data = new Uint8Array(data);\n      } else {\n        throw new TypeError('Data must be either string, ArrayBuffer, or ArrayBufferView');\n      }\n      var base64data = base64.fromByteArray(data);\n      WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, base64data, 'binary');\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._readyState === 'closing' || this._readyState === 'closed') {\n        return;\n      }\n      WebRTCModule.dataChannelClose(this._peerConnectionId, this._reactTag);\n    }\n  }, {\n    key: \"_registerEvents\",\n    value: function _registerEvents() {\n      var _this2 = this;\n      addListener(this, 'dataChannelStateChanged', function (ev) {\n        if (ev.reactTag !== _this2._reactTag) {\n          return;\n        }\n        _this2._readyState = ev.state;\n        if (_this2._id === null && ev.id !== -1) {\n          _this2._id = ev.id;\n        }\n        if (_this2._readyState === 'open') {\n          _this2.dispatchEvent(new RTCDataChannelEvent('open', {\n            channel: _this2\n          }));\n        } else if (_this2._readyState === 'closing') {\n          _this2.dispatchEvent(new RTCDataChannelEvent('closing', {\n            channel: _this2\n          }));\n        } else if (_this2._readyState === 'closed') {\n          _this2.dispatchEvent(new RTCDataChannelEvent('close', {\n            channel: _this2\n          }));\n          removeListener(_this2);\n          WebRTCModule.dataChannelDispose(_this2._peerConnectionId, _this2._reactTag);\n        }\n      });\n      addListener(this, 'dataChannelReceiveMessage', function (ev) {\n        if (ev.reactTag !== _this2._reactTag) {\n          return;\n        }\n        var data = ev.data;\n        if (ev.type === 'binary') {\n          data = base64.toByteArray(ev.data).buffer;\n        }\n        _this2.dispatchEvent(new MessageEvent('message', {\n          data: data\n        }));\n      });\n      addListener(this, 'dataChannelDidChangeBufferedAmount', function (ev) {\n        if (ev.reactTag !== _this2._reactTag) {\n          return;\n        }\n        _this2._bufferedAmount = ev.bufferedAmount;\n        if (_this2._bufferedAmount < _this2.bufferedAmountLowThreshold) {\n          _this2.dispatchEvent(new RTCDataChannelEvent('bufferedamountlow', {\n            channel: _this2\n          }));\n        }\n      });\n    }\n  }]);\n}(defineCustomEventTarget.apply(void 0, DATA_CHANNEL_EVENTS));\nexport { RTCDataChannel as default };","map":{"version":3,"names":["base64","defineCustomEventTarget","NativeModules","addListener","removeListener","MessageEvent","RTCDataChannelEvent","WebRTCModule","DATA_CHANNEL_EVENTS","RTCDataChannel","_defineCustomEventTar","info","_this","_classCallCheck","_callSuper","_defineProperty","_peerConnectionId","peerConnectionId","_reactTag","reactTag","_bufferedAmount","_label","label","_id","id","_ordered","Boolean","ordered","_maxPacketLifeTime","maxPacketLifeTime","_maxRetransmits","maxRetransmits","_protocol","protocol","_negotiated","negotiated","_readyState","readyState","_registerEvents","_inherits","_createClass","key","get","value","send","data","dataChannelSend","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","TypeError","base64data","fromByteArray","close","dataChannelClose","_this2","ev","state","dispatchEvent","channel","dataChannelDispose","type","toByteArray","bufferedAmount","bufferedAmountLowThreshold","apply","default"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/RTCDataChannel.ts"],"sourcesContent":["\nimport * as base64 from 'base64-js';\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport { addListener, removeListener } from './EventEmitter';\nimport MessageEvent from './MessageEvent';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\n\nconst { WebRTCModule } = NativeModules;\n\ntype RTCDataChannelState = 'connecting' | 'open' | 'closing' | 'closed';\n\nconst DATA_CHANNEL_EVENTS = [ 'open', 'message', 'bufferedamountlow', 'closing', 'close', 'error' ];\n\nexport default class RTCDataChannel extends defineCustomEventTarget(...DATA_CHANNEL_EVENTS) {\n    _peerConnectionId: number;\n    _reactTag: string;\n\n    _bufferedAmount: number;\n    _id: number;\n    _label: string;\n    _maxPacketLifeTime?: number;\n    _maxRetransmits?: number;\n    _negotiated: boolean;\n    _ordered: boolean;\n    _protocol: string;\n    _readyState: RTCDataChannelState;\n\n    binaryType = 'arraybuffer'; // we only support 'arraybuffer'\n    bufferedAmountLowThreshold = 0;\n\n    constructor(info) {\n        super();\n\n        this._peerConnectionId = info.peerConnectionId;\n        this._reactTag = info.reactTag;\n\n        this._bufferedAmount = 0;\n        this._label = info.label;\n        this._id = info.id === -1 ? null : info.id; // null until negotiated.\n        this._ordered = Boolean(info.ordered);\n        this._maxPacketLifeTime = info.maxPacketLifeTime;\n        this._maxRetransmits = info.maxRetransmits;\n        this._protocol = info.protocol || '';\n        this._negotiated = Boolean(info.negotiated);\n        this._readyState = info.readyState;\n\n        this._registerEvents();\n    }\n\n    get bufferedAmount(): number {\n        return this._bufferedAmount;\n    }\n\n    get label(): string {\n        return this._label;\n    }\n\n    get id(): number {\n        return this._id;\n    }\n\n    get ordered(): boolean {\n        return this._ordered;\n    }\n\n    get maxPacketLifeTime(): number | undefined {\n        return this._maxPacketLifeTime;\n    }\n\n    get maxRetransmits(): number | undefined {\n        return this._maxRetransmits;\n    }\n\n    get protocol(): string {\n        return this._protocol;\n    }\n\n    get negotiated(): boolean {\n        return this._negotiated;\n    }\n\n    get readyState(): string {\n        return this._readyState;\n    }\n\n    send(data: string): void;\n    send(data: ArrayBuffer): void;\n    send(data: ArrayBufferView): void;\n    send(data: string | ArrayBuffer | ArrayBufferView): void {\n        if (typeof data === 'string') {\n            WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, data, 'text');\n\n            return;\n        }\n\n        // Safely convert the buffer object to an Uint8Array for base64-encoding\n        if (ArrayBuffer.isView(data)) {\n            data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        } else if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n        } else {\n            throw new TypeError('Data must be either string, ArrayBuffer, or ArrayBufferView');\n        }\n\n        const base64data = base64.fromByteArray(data as Uint8Array);\n\n        WebRTCModule.dataChannelSend(this._peerConnectionId, this._reactTag, base64data, 'binary');\n    }\n\n    close(): void {\n        if (this._readyState === 'closing' || this._readyState === 'closed') {\n            return;\n        }\n\n        WebRTCModule.dataChannelClose(this._peerConnectionId, this._reactTag);\n    }\n\n    _registerEvents(): void {\n        addListener(this, 'dataChannelStateChanged', (ev: any) => {\n            if (ev.reactTag !== this._reactTag) {\n                return;\n            }\n\n            this._readyState = ev.state;\n\n            if (this._id === null && ev.id !== -1) {\n                this._id = ev.id;\n            }\n\n            if (this._readyState === 'open') {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('open', { channel: this }));\n            } else if (this._readyState === 'closing') {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('closing', { channel: this }));\n            } else if (this._readyState === 'closed') {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('close', { channel: this }));\n\n                // This DataChannel is done, clean up event handlers.\n                removeListener(this);\n\n                WebRTCModule.dataChannelDispose(this._peerConnectionId, this._reactTag);\n            }\n        });\n\n        addListener(this, 'dataChannelReceiveMessage', (ev: any) => {\n            if (ev.reactTag !== this._reactTag) {\n                return;\n            }\n\n            let data = ev.data;\n\n            if (ev.type === 'binary') {\n                data = base64.toByteArray(ev.data).buffer;\n            }\n\n            // @ts-ignore\n            this.dispatchEvent(new MessageEvent('message', { data }));\n        });\n\n        addListener(this, 'dataChannelDidChangeBufferedAmount', (ev: any) => {\n            if (ev.reactTag !== this._reactTag) {\n                return;\n            }\n\n            this._bufferedAmount = ev.bufferedAmount;\n\n            if (this._bufferedAmount < this.bufferedAmountLowThreshold) {\n                // @ts-ignore\n                this.dispatchEvent(new RTCDataChannelEvent('bufferedamountlow', { channel: this }));\n            }\n        });\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,MAAZ,MAAwB,WAAxB;AACA,SAASC,uBAAT,QAAwC,mBAAxC;AAAA,OAAAC,aAAA;AAGA,SAASC,WAAT,EAAsBC,cAAtB;AACA,OAAOC,YAAP;AACA,OAAOC,mBAAP;AAEA,IAAQC,YAAA,GAAiBL,aAAzB,CAAQK,YAAA;AAIR,IAAMC,mBAAmB,GAAG,CAAE,MAAF,EAAU,SAAV,EAAqB,mBAArB,EAA0C,SAA1C,EAAqD,OAArD,EAA8D,OAA9D,CAA5B;AAAA,IAEqBC,cAAN,aAAAC,qBAAA;EAiBX,SAAAD,eAAYE,IAAD,EAAO;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,cAAA;IACdG,KAAA,GAAAE,UAAA,OAAAL,cAAA;IADcM,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA;IAAAG,eAAA,CAAAH,KAAA,gBAHL,aAGK;IAAAG,eAAA,CAAAH,KAAA,gCAFW,CAEX;IAGdA,KAAA,CAAKI,iBAAL,GAAyBL,IAAI,CAACM,gBAA9B;IACAL,KAAA,CAAKM,SAAL,GAAiBP,IAAI,CAACQ,QAAtB;IAEAP,KAAA,CAAKQ,eAAL,GAAuB,CAAvB;IACAR,KAAA,CAAKS,MAAL,GAAcV,IAAI,CAACW,KAAnB;IACAV,KAAA,CAAKW,GAAL,GAAWZ,IAAI,CAACa,EAAL,KAAY,CAAC,CAAb,GAAiB,IAAjB,GAAwBb,IAAI,CAACa,EAAxC;IACAZ,KAAA,CAAKa,QAAL,GAAgBC,OAAO,CAACf,IAAI,CAACgB,OAAN,CAAvB;IACAf,KAAA,CAAKgB,kBAAL,GAA0BjB,IAAI,CAACkB,iBAA/B;IACAjB,KAAA,CAAKkB,eAAL,GAAuBnB,IAAI,CAACoB,cAA5B;IACAnB,KAAA,CAAKoB,SAAL,GAAiBrB,IAAI,CAACsB,QAAL,IAAiB,EAAlC;IACArB,KAAA,CAAKsB,WAAL,GAAmBR,OAAO,CAACf,IAAI,CAACwB,UAAN,CAA1B;IACAvB,KAAA,CAAKwB,WAAL,GAAmBzB,IAAI,CAAC0B,UAAxB;IAEAzB,KAAA,CAAK0B,eAAL;IAAA,OAAA1B,KAAA;EACH;EAAA2B,SAAA,CAAA9B,cAAA,EAAAC,qBAAA;EAAA,OAAA8B,YAAA,CAAA/B,cAAA;IAAAgC,GAAA;IAAAC,GAAA,EAEiB,SAAAA,IAAA,EAAW;MACzB,OAAO,KAAKtB,eAAZ;IACH;EAAA;IAAAqB,GAAA;IAAAC,GAAA,EAEQ,SAAAA,IAAA,EAAW;MAChB,OAAO,KAAKrB,MAAZ;IACH;EAAA;IAAAoB,GAAA;IAAAC,GAAA,EAEK,SAAAA,IAAA,EAAW;MACb,OAAO,KAAKnB,GAAZ;IACH;EAAA;IAAAkB,GAAA;IAAAC,GAAA,EAEU,SAAAA,IAAA,EAAY;MACnB,OAAO,KAAKjB,QAAZ;IACH;EAAA;IAAAgB,GAAA;IAAAC,GAAA,EAEoB,SAAAA,IAAA,EAAuB;MACxC,OAAO,KAAKd,kBAAZ;IACH;EAAA;IAAAa,GAAA;IAAAC,GAAA,EAEiB,SAAAA,IAAA,EAAuB;MACrC,OAAO,KAAKZ,eAAZ;IACH;EAAA;IAAAW,GAAA;IAAAC,GAAA,EAEW,SAAAA,IAAA,EAAW;MACnB,OAAO,KAAKV,SAAZ;IACH;EAAA;IAAAS,GAAA;IAAAC,GAAA,EAEa,SAAAA,IAAA,EAAY;MACtB,OAAO,KAAKR,WAAZ;IACH;EAAA;IAAAO,GAAA;IAAAC,GAAA,EAEa,SAAAA,IAAA,EAAW;MACrB,OAAO,KAAKN,WAAZ;IACH;EAAA;IAAAK,GAAA;IAAAE,KAAA,EAKD,SAAAC,IAAIA,CAACC,IAAD,EAAqD;MACrD,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;QAC1BtC,YAAY,CAACuC,eAAb,CAA6B,KAAK9B,iBAAlC,EAAqD,KAAKE,SAA1D,EAAqE2B,IAArE,EAA2E,MAA3E;QAEA;MACH;MAGD,IAAIE,WAAW,CAACC,MAAZ,CAAmBH,IAAnB,CAAJ,EAA8B;QAC1BA,IAAI,GAAG,IAAII,UAAJ,CAAeJ,IAAI,CAACK,MAApB,EAA4BL,IAAI,CAACM,UAAjC,EAA6CN,IAAI,CAACO,UAAlD,CAAP;MACH,CAFD,MAEO,IAAIP,IAAI,YAAYE,WAApB,EAAiC;QACpCF,IAAI,GAAG,IAAII,UAAJ,CAAeJ,IAAf,CAAP;MACH,CAFM,MAEA;QACH,MAAM,IAAIQ,SAAJ,CAAc,6DAAd,CAAN;MACH;MAED,IAAMC,UAAU,GAAGtD,MAAM,CAACuD,aAAP,CAAqBV,IAArB,CAAnB;MAEAtC,YAAY,CAACuC,eAAb,CAA6B,KAAK9B,iBAAlC,EAAqD,KAAKE,SAA1D,EAAqEoC,UAArE,EAAiF,QAAjF;IACH;EAAA;IAAAb,GAAA;IAAAE,KAAA,EAED,SAAAa,KAAKA,CAAA,EAAS;MACV,IAAI,KAAKpB,WAAL,KAAqB,SAArB,IAAkC,KAAKA,WAAL,KAAqB,QAA3D,EAAqE;QACjE;MACH;MAED7B,YAAY,CAACkD,gBAAb,CAA8B,KAAKzC,iBAAnC,EAAsD,KAAKE,SAA3D;IACH;EAAA;IAAAuB,GAAA;IAAAE,KAAA,EAED,SAAAL,eAAeA,CAAA,EAAS;MAAA,IAAAoB,MAAA;MACpBvD,WAAW,CAAC,IAAD,EAAO,yBAAP,EAAmC,UAAAwD,EAAD,EAAa;QACtD,IAAIA,EAAE,CAACxC,QAAH,KAAgBuC,MAAA,CAAKxC,SAAzB,EAAoC;UAChC;QACH;QAEDwC,MAAA,CAAKtB,WAAL,GAAmBuB,EAAE,CAACC,KAAtB;QAEA,IAAIF,MAAA,CAAKnC,GAAL,KAAa,IAAb,IAAqBoC,EAAE,CAACnC,EAAH,KAAU,CAAC,CAApC,EAAuC;UACnCkC,MAAA,CAAKnC,GAAL,GAAWoC,EAAE,CAACnC,EAAd;QACH;QAED,IAAIkC,MAAA,CAAKtB,WAAL,KAAqB,MAAzB,EAAiC;UAE7BsB,MAAA,CAAKG,aAAL,CAAmB,IAAIvD,mBAAJ,CAAwB,MAAxB,EAAgC;YAAEwD,OAAO,EAAEJ;UAAX,CAAhC,CAAnB;QACH,CAHD,MAGO,IAAIA,MAAA,CAAKtB,WAAL,KAAqB,SAAzB,EAAoC;UAEvCsB,MAAA,CAAKG,aAAL,CAAmB,IAAIvD,mBAAJ,CAAwB,SAAxB,EAAmC;YAAEwD,OAAO,EAAEJ;UAAX,CAAnC,CAAnB;QACH,CAHM,MAGA,IAAIA,MAAA,CAAKtB,WAAL,KAAqB,QAAzB,EAAmC;UAEtCsB,MAAA,CAAKG,aAAL,CAAmB,IAAIvD,mBAAJ,CAAwB,OAAxB,EAAiC;YAAEwD,OAAO,EAAEJ;UAAX,CAAjC,CAAnB;UAGAtD,cAAc,CAACsD,MAAD,CAAd;UAEAnD,YAAY,CAACwD,kBAAb,CAAgCL,MAAA,CAAK1C,iBAArC,EAAwD0C,MAAA,CAAKxC,SAA7D;QACH;MACJ,CA1BU,CAAX;MA4BAf,WAAW,CAAC,IAAD,EAAO,2BAAP,EAAqC,UAAAwD,EAAD,EAAa;QACxD,IAAIA,EAAE,CAACxC,QAAH,KAAgBuC,MAAA,CAAKxC,SAAzB,EAAoC;UAChC;QACH;QAED,IAAI2B,IAAI,GAAGc,EAAE,CAACd,IAAd;QAEA,IAAIc,EAAE,CAACK,IAAH,KAAY,QAAhB,EAA0B;UACtBnB,IAAI,GAAG7C,MAAM,CAACiE,WAAP,CAAmBN,EAAE,CAACd,IAAtB,EAA4BK,MAAnC;QACH;QAGDQ,MAAA,CAAKG,aAAL,CAAmB,IAAIxD,YAAJ,CAAiB,SAAjB,EAA4B;UAAEwC,IAAA,EAAAA;QAAF,CAA5B,CAAnB;MACH,CAbU,CAAX;MAeA1C,WAAW,CAAC,IAAD,EAAO,oCAAP,EAA8C,UAAAwD,EAAD,EAAa;QACjE,IAAIA,EAAE,CAACxC,QAAH,KAAgBuC,MAAA,CAAKxC,SAAzB,EAAoC;UAChC;QACH;QAEDwC,MAAA,CAAKtC,eAAL,GAAuBuC,EAAE,CAACO,cAA1B;QAEA,IAAIR,MAAA,CAAKtC,eAAL,GAAuBsC,MAAA,CAAKS,0BAAhC,EAA4D;UAExDT,MAAA,CAAKG,aAAL,CAAmB,IAAIvD,mBAAJ,CAAwB,mBAAxB,EAA6C;YAAEwD,OAAO,EAAEJ;UAAX,CAA7C,CAAnB;QACH;MACJ,CAXU,CAAX;IAYH;EAAA;AAAA,EAhKuCzD,uBAAuB,CAAAmE,KAAA,SAAI5D,mBAAJ,CAApD;AAAA,SAAMC,cAAN,IAAA4D,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}