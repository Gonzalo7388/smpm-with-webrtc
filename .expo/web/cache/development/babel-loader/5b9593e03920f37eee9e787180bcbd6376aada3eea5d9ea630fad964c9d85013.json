{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport RTCRtpCodecCapability from \"./RTCRtpCodecCapability\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar RTCRtpCapabilities = function () {\n  function RTCRtpCapabilities(codecs) {\n    _classCallCheck(this, RTCRtpCapabilities);\n    _defineProperty(this, \"_codecs\", []);\n    this._codecs = codecs;\n    Object.freeze(this);\n  }\n  return _createClass(RTCRtpCapabilities, [{\n    key: \"codecs\",\n    get: function get() {\n      return this._codecs;\n    }\n  }]);\n}();\nexport { RTCRtpCapabilities as default };\nfunction getCapabilities(endpoint) {\n  switch (endpoint) {\n    case 'sender':\n      {\n        var capabilities = WebRTCModule.senderGetCapabilities();\n        if (!capabilities) {\n          return null;\n        }\n        return new RTCRtpCapabilities(capabilities.codecs);\n      }\n    case 'receiver':\n      {\n        var _capabilities = WebRTCModule.receiverGetCapabilities();\n        if (!_capabilities) {\n          return null;\n        }\n        return new RTCRtpCapabilities(_capabilities.codecs);\n      }\n    default:\n      throw new TypeError('Invalid endpoint: ' + endpoint);\n  }\n}\nexport var DEFAULT_AUDIO_CAPABILITIES = new RTCRtpCapabilities([new RTCRtpCodecCapability({\n  mimeType: 'audio/G722'\n}), new RTCRtpCodecCapability({\n  mimeType: 'audio/iLBC'\n})]);\nexport var senderCapabilities = getCapabilities('sender');\nexport var receiverCapabilities = getCapabilities('receiver');","map":{"version":3,"names":["RTCRtpCodecCapability","WebRTCModule","NativeModules","RTCRtpCapabilities","codecs","_classCallCheck","_defineProperty","_codecs","Object","freeze","_createClass","key","get","default","getCapabilities","endpoint","capabilities","senderGetCapabilities","receiverGetCapabilities","TypeError","DEFAULT_AUDIO_CAPABILITIES","mimeType","senderCapabilities","receiverCapabilities"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/RTCRtpCapabilities.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport RTCRtpCodecCapability from './RTCRtpCodecCapability';\nconst { WebRTCModule } = NativeModules;\n\n/**\n * @brief represents codec capabilities for senders and receivers. Currently\n * this only supports codec names and does not have other\n * fields like clockRate and numChannels and such.\n */\nexport default class RTCRtpCapabilities {\n    _codecs: RTCRtpCodecCapability[] = [];\n    constructor(codecs: RTCRtpCodecCapability[]) {\n        this._codecs = codecs;\n        Object.freeze(this);\n    }\n\n    get codecs() {\n        return this._codecs;\n    }\n}\n\n\nfunction getCapabilities(endpoint: 'sender' | 'receiver'): RTCRtpCapabilities | null {\n    switch (endpoint) {\n        case 'sender': {\n            const capabilities = WebRTCModule.senderGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        case 'receiver': {\n            const capabilities = WebRTCModule.receiverGetCapabilities();\n\n            if (!capabilities) {\n                return null;\n            }\n\n            return new RTCRtpCapabilities(capabilities.codecs);\n        }\n\n        default:\n            throw new TypeError('Invalid endpoint: ' + endpoint);\n    }\n}\n\n\n/**\n * Hardcoded audio capabilities based on the WebRTC native documentation:\n * https://webrtc.github.io/webrtc-org/faq/. The mime type is specified in\n * https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2.\n */\nexport const DEFAULT_AUDIO_CAPABILITIES = new RTCRtpCapabilities([\n    new RTCRtpCodecCapability({ mimeType: 'audio/G722' }),\n    new RTCRtpCodecCapability({ mimeType: 'audio/iLBC' }),\n]);\n\n// Initialize capabilities on module import\nexport const senderCapabilities = getCapabilities('sender');\nexport const receiverCapabilities = getCapabilities('receiver');\n\n"],"mappings":";;;;;;;;;;;;;;;;AAEA,OAAOA,qBAAP;AACA,IAAQC,YAAA,GAAiBC,aAAzB,CAAQD,YAAA;AAAR,IAOqBE,kBAAN;EAEX,SAAAA,mBAAYC,MAAD,EAAkC;IAAAC,eAAA,OAAAF,kBAAA;IAAAG,eAAA,kBADV,EACU;IACzC,KAAKC,OAAL,GAAeH,MAAf;IACAI,MAAM,CAACC,MAAP,CAAc,IAAd;EACH;EAAA,OAAAC,YAAA,CAAAP,kBAAA;IAAAQ,GAAA;IAAAC,GAAA,EAES,SAAAA,IAAA,EAAG;MACT,OAAO,KAAKL,OAAZ;IACH;EAAA;AAAA;AAAA,SATgBJ,kBAAN,IAAAU,OAAA;AAaf,SAASC,eAATA,CAAyBC,QAAzB,EAAqF;EACjF,QAAQA,QAAR;IACI,KAAK,QAAL;MAAe;QACX,IAAMC,YAAY,GAAGf,YAAY,CAACgB,qBAAb,EAArB;QAEA,IAAI,CAACD,YAAL,EAAmB;UACf,OAAO,IAAP;QACH;QAED,OAAO,IAAIb,kBAAJ,CAAuBa,YAAY,CAACZ,MAApC,CAAP;MACH;IAED,KAAK,UAAL;MAAiB;QACb,IAAMY,aAAY,GAAGf,YAAY,CAACiB,uBAAb,EAArB;QAEA,IAAI,CAACF,aAAL,EAAmB;UACf,OAAO,IAAP;QACH;QAED,OAAO,IAAIb,kBAAJ,CAAuBa,aAAY,CAACZ,MAApC,CAAP;MACH;IAED;MACI,MAAM,IAAIe,SAAJ,CAAc,uBAAuBJ,QAArC,CAAN;EAtBR;AAwBH;AAQD,OAAO,IAAMK,0BAA0B,GAAG,IAAIjB,kBAAJ,CAAuB,CAC7D,IAAIH,qBAAJ,CAA0B;EAAEqB,QAAQ,EAAE;AAAZ,CAA1B,CAD6D,EAE7D,IAAIrB,qBAAJ,CAA0B;EAAEqB,QAAQ,EAAE;AAAZ,CAA1B,CAF6D,CAAvB,CAAnC;AAMP,OAAO,IAAMC,kBAAkB,GAAGR,eAAe,CAAC,QAAD,CAA1C;AACP,OAAO,IAAMS,oBAAoB,GAAGT,eAAe,CAAC,UAAD,CAA5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}