{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar nativeEmitter = new NativeEventEmitter(WebRTCModule);\nvar NATIVE_EVENTS = ['peerConnectionSignalingStateChanged', 'peerConnectionStateChanged', 'peerConnectionOnRenegotiationNeeded', 'peerConnectionIceConnectionChanged', 'peerConnectionIceGatheringChanged', 'peerConnectionGotICECandidate', 'peerConnectionDidOpenDataChannel', 'peerConnectionOnRemoveTrack', 'peerConnectionOnTrack', 'dataChannelStateChanged', 'dataChannelReceiveMessage', 'dataChannelDidChangeBufferedAmount', 'mediaStreamTrackMuteChanged', 'mediaStreamTrackEnded'];\nvar eventEmitter = new EventEmitter();\nexport function setupNativeEvents() {\n  var _loop = function _loop(eventName) {\n    nativeEmitter.addListener(eventName, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      eventEmitter.emit.apply(eventEmitter, [eventName].concat(args));\n    });\n  };\n  for (var eventName of NATIVE_EVENTS) {\n    _loop(eventName);\n  }\n}\nvar _subscriptions = new Map();\nexport function addListener(listener, eventName, eventHandler) {\n  var _subscriptions$get;\n  if (!NATIVE_EVENTS.includes(eventName)) {\n    throw new Error(\"Invalid event: \" + eventName);\n  }\n  if (!_subscriptions.has(listener)) {\n    _subscriptions.set(listener, []);\n  }\n  (_subscriptions$get = _subscriptions.get(listener)) === null || _subscriptions$get === void 0 ? void 0 : _subscriptions$get.push(eventEmitter.addListener(eventName, eventHandler));\n}\nexport function removeListener(listener) {\n  var _subscriptions$get2;\n  (_subscriptions$get2 = _subscriptions.get(listener)) === null || _subscriptions$get2 === void 0 ? void 0 : _subscriptions$get2.forEach(function (sub) {\n    sub.remove();\n  });\n  _subscriptions.delete(listener);\n}","map":{"version":3,"names":["EventEmitter","WebRTCModule","NativeModules","nativeEmitter","NativeEventEmitter","NATIVE_EVENTS","eventEmitter","setupNativeEvents","_loop","eventName","addListener","_len","arguments","length","args","Array","_key","emit","apply","concat","_subscriptions","Map","listener","eventHandler","_subscriptions$get","includes","Error","has","set","get","push","removeListener","_subscriptions$get2","forEach","sub","remove","delete"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/EventEmitter.ts"],"sourcesContent":["import { NativeModules, NativeEventEmitter, EmitterSubscription } from 'react-native';\n// @ts-ignore\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\n\nconst { WebRTCModule } = NativeModules;\n\n// This emitter is going to be used to listen to all the native events (once) and then\n// re-emit them on a JS-only emitter.\nconst nativeEmitter = new NativeEventEmitter(WebRTCModule);\n\nconst NATIVE_EVENTS = [\n    'peerConnectionSignalingStateChanged',\n    'peerConnectionStateChanged',\n    'peerConnectionOnRenegotiationNeeded',\n    'peerConnectionIceConnectionChanged',\n    'peerConnectionIceGatheringChanged',\n    'peerConnectionGotICECandidate',\n    'peerConnectionDidOpenDataChannel',\n    'peerConnectionOnRemoveTrack',\n    'peerConnectionOnTrack',\n    'dataChannelStateChanged',\n    'dataChannelReceiveMessage',\n    'dataChannelDidChangeBufferedAmount',\n    'mediaStreamTrackMuteChanged',\n    'mediaStreamTrackEnded',\n];\n\nconst eventEmitter = new EventEmitter();\n\nexport function setupNativeEvents() {\n    for (const eventName of NATIVE_EVENTS) {\n        nativeEmitter.addListener(eventName, (...args) => {\n            eventEmitter.emit(eventName, ...args);\n        });\n    }\n}\n\ntype EventHandler = (event: unknown) => void;\ntype Listener = unknown;\n\nconst _subscriptions: Map<Listener, EmitterSubscription[]> = new Map();\n\nexport function addListener(listener: Listener, eventName: string, eventHandler: EventHandler): void {\n    if (!NATIVE_EVENTS.includes(eventName)) {\n        throw new Error(`Invalid event: ${eventName}`);\n    }\n\n    if (!_subscriptions.has(listener)) {\n        _subscriptions.set(listener, []);\n    }\n\n    _subscriptions.get(listener)?.push(eventEmitter.addListener(eventName, eventHandler));\n}\n\nexport function removeListener(listener: Listener): void {\n    _subscriptions.get(listener)?.forEach(sub => {\n        sub.remove();\n    });\n\n    _subscriptions.delete(listener);\n}\n"],"mappings":";;AAEA,OAAOA,YAAP,MAAyB,oDAAzB;AAEA,IAAQC,YAAA,GAAiBC,aAAzB,CAAQD,YAAA;AAIR,IAAME,aAAa,GAAG,IAAIC,kBAAJ,CAAuBH,YAAvB,CAAtB;AAEA,IAAMI,aAAa,GAAG,CAClB,qCADkB,EAElB,4BAFkB,EAGlB,qCAHkB,EAIlB,oCAJkB,EAKlB,mCALkB,EAMlB,+BANkB,EAOlB,kCAPkB,EAQlB,6BARkB,EASlB,uBATkB,EAUlB,yBAVkB,EAWlB,2BAXkB,EAYlB,oCAZkB,EAalB,6BAbkB,EAclB,uBAdkB,CAAtB;AAiBA,IAAMC,YAAY,GAAG,IAAIN,YAAJ,EAArB;AAEA,OAAO,SAASO,iBAATA,CAAA,EAA6B;EAAA,IAAAC,KAAA,YAAAA,MAAAC,SAAA,EACO;IACnCN,aAAa,CAACO,WAAd,CAA0BD,SAA1B,EAAqC,YAAa;MAAA,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAS,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAATF,IAAS,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAC9CV,YAAY,CAACW,IAAb,CAAAC,KAAA,CAAAZ,YAAY,GAAMG,SAAlB,EAAAU,MAAA,CAAgCL,IAAhC;IACH,CAFD;EAGH;EAJD,KAAK,IAAML,SAAX,IAAwBJ,aAAxB;IAAAG,KAAA,CAAAC,SAAA;EAAA;AAKH;AAKD,IAAMW,cAAoD,GAAG,IAAIC,GAAJ,EAA7D;AAEA,OAAO,SAASX,WAATA,CAAqBY,QAArB,EAAyCb,SAAzC,EAA4Dc,YAA5D,EAA8F;EAAA,IAAAC,kBAAA;EACjG,IAAI,CAACnB,aAAa,CAACoB,QAAd,CAAuBhB,SAAvB,CAAL,EAAwC;IACpC,MAAM,IAAIiB,KAAJ,qBAA4BjB,SAA5B,CAAN;EACH;EAED,IAAI,CAACW,cAAc,CAACO,GAAf,CAAmBL,QAAnB,CAAL,EAAmC;IAC/BF,cAAc,CAACQ,GAAf,CAAmBN,QAAnB,EAA6B,EAA7B;EACH;EAED,CAAAE,kBAAA,GAAAJ,cAAc,CAACS,GAAf,CAAmBP,QAAnB,eAAAE,kBAAA,uBAAAA,kBAAA,CAA8BM,IAA9B,CAAmCxB,YAAY,CAACI,WAAb,CAAyBD,SAAzB,EAAoCc,YAApC,CAAnC;AACH;AAED,OAAO,SAASQ,cAATA,CAAwBT,QAAxB,EAAkD;EAAA,IAAAU,mBAAA;EACrD,CAAAA,mBAAA,GAAAZ,cAAc,CAACS,GAAf,CAAmBP,QAAnB,eAAAU,mBAAA,uBAAAA,mBAAA,CAA8BC,OAA9B,CAAsC,UAAAC,GAAG,EAAI;IACzCA,GAAG,CAACC,MAAJ;EACH,CAFD;EAIAf,cAAc,CAACgB,MAAf,CAAsBd,QAAtB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}