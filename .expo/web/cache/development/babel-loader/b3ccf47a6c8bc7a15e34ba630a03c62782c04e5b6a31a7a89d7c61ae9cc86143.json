{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { senderCapabilities, DEFAULT_AUDIO_CAPABILITIES } from \"./RTCRtpCapabilities\";\nimport RTCRtpSendParameters from \"./RTCRtpSendParameters\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar RTCRtpSender = function () {\n  function RTCRtpSender(info) {\n    _classCallCheck(this, RTCRtpSender);\n    _defineProperty(this, \"_id\", void 0);\n    _defineProperty(this, \"_track\", null);\n    _defineProperty(this, \"_peerConnectionId\", void 0);\n    _defineProperty(this, \"_rtpParameters\", void 0);\n    this._peerConnectionId = info.peerConnectionId;\n    this._id = info.id;\n    this._rtpParameters = new RTCRtpSendParameters(info.rtpParameters);\n    if (info.track) {\n      this._track = info.track;\n    }\n  }\n  return _createClass(RTCRtpSender, [{\n    key: \"replaceTrack\",\n    value: function () {\n      var _replaceTrack = _asyncToGenerator(function* (track) {\n        try {\n          yield WebRTCModule.senderReplaceTrack(this._peerConnectionId, this._id, track ? track.id : null);\n        } catch (e) {\n          return;\n        }\n        this._track = track;\n      });\n      function replaceTrack(_x) {\n        return _replaceTrack.apply(this, arguments);\n      }\n      return replaceTrack;\n    }()\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      return this._rtpParameters;\n    }\n  }, {\n    key: \"setParameters\",\n    value: function () {\n      var _setParameters = _asyncToGenerator(function* (parameters) {\n        var _params = JSON.parse(JSON.stringify(parameters));\n        var newParameters = yield WebRTCModule.senderSetParameters(this._peerConnectionId, this._id, _params);\n        this._rtpParameters = new RTCRtpSendParameters(newParameters);\n      });\n      function setParameters(_x2) {\n        return _setParameters.apply(this, arguments);\n      }\n      return setParameters;\n    }()\n  }, {\n    key: \"getStats\",\n    value: function getStats() {\n      return WebRTCModule.senderGetStats(this._peerConnectionId, this._id).then(function (data) {\n        return (new Map(JSON.parse(data))\n        );\n      });\n    }\n  }, {\n    key: \"track\",\n    get: function get() {\n      return this._track;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }], [{\n    key: \"getCapabilities\",\n    value: function getCapabilities(kind) {\n      if (kind === 'audio') {\n        return DEFAULT_AUDIO_CAPABILITIES;\n      }\n      if (!senderCapabilities) {\n        throw new Error('sender Capabilities are null');\n      }\n      return senderCapabilities;\n    }\n  }]);\n}();\nexport { RTCRtpSender as default };","map":{"version":3,"names":["senderCapabilities","DEFAULT_AUDIO_CAPABILITIES","RTCRtpSendParameters","WebRTCModule","NativeModules","RTCRtpSender","info","_classCallCheck","_defineProperty","_peerConnectionId","peerConnectionId","_id","id","_rtpParameters","rtpParameters","track","_track","_createClass","key","value","_replaceTrack","_asyncToGenerator","senderReplaceTrack","e","replaceTrack","_x","apply","arguments","getParameters","_setParameters","parameters","_params","JSON","parse","stringify","newParameters","senderSetParameters","setParameters","_x2","getStats","senderGetStats","then","data","Map","get","getCapabilities","kind","Error","default"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/RTCRtpSender.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport MediaStreamTrack from './MediaStreamTrack';\nimport RTCRtpCapabilities, { senderCapabilities, DEFAULT_AUDIO_CAPABILITIES } from './RTCRtpCapabilities';\nimport RTCRtpSendParameters, { RTCRtpSendParametersInit } from './RTCRtpSendParameters';\n\nconst { WebRTCModule } = NativeModules;\n\n\nexport default class RTCRtpSender {\n    _id: string;\n    _track: MediaStreamTrack | null = null;\n    _peerConnectionId: number;\n    _rtpParameters: RTCRtpSendParameters;\n\n    constructor(info: {\n        peerConnectionId: number,\n        id: string,\n        track?: MediaStreamTrack,\n        rtpParameters: RTCRtpSendParametersInit\n    }) {\n        this._peerConnectionId = info.peerConnectionId;\n        this._id = info.id;\n        this._rtpParameters = new RTCRtpSendParameters(info.rtpParameters);\n\n        if (info.track) {\n            this._track = info.track;\n        }\n    }\n\n    async replaceTrack(track: MediaStreamTrack | null): Promise<void> {\n        try {\n            await WebRTCModule.senderReplaceTrack(this._peerConnectionId, this._id, track ? track.id : null);\n        } catch (e) {\n            return;\n        }\n\n        this._track = track;\n    }\n\n    static getCapabilities(kind: 'audio' | 'video'): RTCRtpCapabilities {\n        if (kind === 'audio') {\n            return DEFAULT_AUDIO_CAPABILITIES;\n        }\n\n        if (!senderCapabilities) {\n            throw new Error('sender Capabilities are null');\n        }\n\n        return senderCapabilities;\n    }\n\n    getParameters(): RTCRtpSendParameters {\n        return this._rtpParameters;\n    }\n\n    async setParameters(parameters: RTCRtpSendParameters): Promise<void> {\n        // This allows us to get rid of private \"underscore properties\"\n        const _params = JSON.parse(JSON.stringify(parameters));\n        const newParameters = await WebRTCModule.senderSetParameters(this._peerConnectionId, this._id, _params);\n\n        this._rtpParameters = new RTCRtpSendParameters(newParameters);\n    }\n\n    getStats() {\n        return WebRTCModule.senderGetStats(this._peerConnectionId, this._id).then(data =>\n            /* On both Android and iOS it is faster to construct a single\n            JSON string representing the Map of StatsReports and have it\n            pass through the React Native bridge rather than the Map of\n            StatsReports. While the implementations do try to be faster in\n            general, the stress is on being faster to pass through the React\n            Native bridge which is a bottleneck that tends to be visible in\n            the UI when there is congestion involving UI-related passing.\n            */\n            new Map(JSON.parse(data))\n        );\n    }\n\n    get track() {\n        return this._track;\n    }\n\n    get id() {\n        return this._id;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAGA,SAA6BA,kBAA7B,EAAiDC,0BAAjD;AACA,OAAOC,oBAAP;AAEA,IAAQC,YAAA,GAAiBC,aAAzB,CAAQD,YAAA;AAAR,IAGqBE,YAAN;EAMX,SAAAA,aAAYC,IAAD,EAKR;IAAAC,eAAA,OAAAF,YAAA;IAAAG,eAAA;IAAAA,eAAA,iBAT+B,IAS/B;IAAAA,eAAA;IAAAA,eAAA;IACC,KAAKC,iBAAL,GAAyBH,IAAI,CAACI,gBAA9B;IACA,KAAKC,GAAL,GAAWL,IAAI,CAACM,EAAhB;IACA,KAAKC,cAAL,GAAsB,IAAIX,oBAAJ,CAAyBI,IAAI,CAACQ,aAA9B,CAAtB;IAEA,IAAIR,IAAI,CAACS,KAAT,EAAgB;MACZ,KAAKC,MAAL,GAAcV,IAAI,CAACS,KAAnB;IACH;EACJ;EAAA,OAAAE,YAAA,CAAAZ,YAAA;IAAAa,GAAA;IAAAC,KAAA;MAAA,IAAAC,aAAA,GAAAC,iBAAA,CAEiB,WAACN,KAAD,EAAgD;QAC9D,IAAI;UACA,MAAMZ,YAAY,CAACmB,kBAAb,CAAgC,KAAKb,iBAArC,EAAwD,KAAKE,GAA7D,EAAkEI,KAAK,GAAGA,KAAK,CAACH,EAAT,GAAc,IAArF,CAAN;QACH,CAFD,CAEE,OAAOW,CAAP,EAAU;UACR;QACH;QAED,KAAKP,MAAL,GAAcD,KAAd;MACH;MAAA,SARKS,YAAYA,CAAAC,EAAA;QAAA,OAAAL,aAAA,CAAAM,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAZH,YAAY;IAAA;EAAA;IAAAN,GAAA;IAAAC,KAAA,EAsBlB,SAAAS,aAAaA,CAAA,EAAyB;MAClC,OAAO,KAAKf,cAAZ;IACH;EAAA;IAAAK,GAAA;IAAAC,KAAA;MAAA,IAAAU,cAAA,GAAAR,iBAAA,CAEkB,WAACS,UAAD,EAAkD;QAEjE,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,UAAf,CAAX,CAAhB;QACA,IAAMK,aAAa,SAAShC,YAAY,CAACiC,mBAAb,CAAiC,KAAK3B,iBAAtC,EAAyD,KAAKE,GAA9D,EAAmEoB,OAAnE,CAA5B;QAEA,KAAKlB,cAAL,GAAsB,IAAIX,oBAAJ,CAAyBiC,aAAzB,CAAtB;MACH;MAAA,SANKE,aAAaA,CAAAC,GAAA;QAAA,OAAAT,cAAA,CAAAH,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAbU,aAAa;IAAA;EAAA;IAAAnB,GAAA;IAAAC,KAAA,EAQnB,SAAAoB,QAAQA,CAAA,EAAG;MACP,OAAOpC,YAAY,CAACqC,cAAb,CAA4B,KAAK/B,iBAAjC,EAAoD,KAAKE,GAAzD,EAA8D8B,IAA9D,CAAmE,UAAAC,IAAI;QAAA,QAS1E,IAAIC,GAAJ,CAAQX,IAAI,CAACC,KAAL,CAAWS,IAAX,CAAR;QATG;MAAA,EAAP;IAWH;EAAA;IAAAxB,GAAA;IAAA0B,GAAA,EAEQ,SAAAA,IAAA,EAAG;MACR,OAAO,KAAK5B,MAAZ;IACH;EAAA;IAAAE,GAAA;IAAA0B,GAAA,EAEK,SAAAA,IAAA,EAAG;MACL,OAAO,KAAKjC,GAAZ;IACH;EAAA;IAAAO,GAAA;IAAAC,KAAA,EA5CqB,SAAf0B,eAAeA,CAACC,IAAD,EAA8C;MAChE,IAAIA,IAAI,KAAK,OAAb,EAAsB;QAClB,OAAO7C,0BAAP;MACH;MAED,IAAI,CAACD,kBAAL,EAAyB;QACrB,MAAM,IAAI+C,KAAJ,CAAU,8BAAV,CAAN;MACH;MAED,OAAO/C,kBAAP;IACH;EAAA;AAAA;AAAA,SAzCgBK,YAAN,IAAA2C,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}