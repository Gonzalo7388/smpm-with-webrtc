{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar RTCRtpTransceiver = function () {\n  function RTCRtpTransceiver(args) {\n    _classCallCheck(this, RTCRtpTransceiver);\n    _defineProperty(this, \"_peerConnectionId\", void 0);\n    _defineProperty(this, \"_sender\", void 0);\n    _defineProperty(this, \"_receiver\", void 0);\n    _defineProperty(this, \"_mid\", null);\n    _defineProperty(this, \"_direction\", void 0);\n    _defineProperty(this, \"_currentDirection\", void 0);\n    _defineProperty(this, \"_stopped\", void 0);\n    this._peerConnectionId = args.peerConnectionId;\n    this._mid = args.mid ? args.mid : null;\n    this._direction = args.direction;\n    this._currentDirection = args.currentDirection;\n    this._stopped = Boolean(args.isStopped);\n    this._sender = args.sender;\n    this._receiver = args.receiver;\n  }\n  return _createClass(RTCRtpTransceiver, [{\n    key: \"mid\",\n    get: function get() {\n      return this._mid;\n    }\n  }, {\n    key: \"stopped\",\n    get: function get() {\n      return this._stopped;\n    }\n  }, {\n    key: \"direction\",\n    get: function get() {\n      return this._direction;\n    },\n    set: function set(val) {\n      var _this = this;\n      if (!['sendonly', 'recvonly', 'sendrecv', 'inactive'].includes(val)) {\n        throw new TypeError('Invalid direction provided');\n      }\n      if (this._stopped) {\n        throw Error('Transceiver Stopped');\n      }\n      if (this._direction === val) {\n        return;\n      }\n      var oldDirection = this._direction;\n      WebRTCModule.transceiverSetDirection(this._peerConnectionId, this.sender.id, val).catch(function () {\n        _this._direction = oldDirection;\n      });\n      this._direction = val;\n    }\n  }, {\n    key: \"currentDirection\",\n    get: function get() {\n      return this._currentDirection;\n    }\n  }, {\n    key: \"sender\",\n    get: function get() {\n      return this._sender;\n    }\n  }, {\n    key: \"receiver\",\n    get: function get() {\n      return this._receiver;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this2 = this;\n      if (this._stopped) {\n        return;\n      }\n      WebRTCModule.transceiverStop(this._peerConnectionId, this.sender.id).then(function () {\n        return _this2._setStopped();\n      });\n    }\n  }, {\n    key: \"_setStopped\",\n    value: function _setStopped() {\n      this._stopped = true;\n      this._direction = 'stopped';\n      this._currentDirection = 'stopped';\n      this._mid = null;\n    }\n  }]);\n}();\nexport { RTCRtpTransceiver as default };","map":{"version":3,"names":["WebRTCModule","NativeModules","RTCRtpTransceiver","args","_classCallCheck","_defineProperty","_peerConnectionId","peerConnectionId","_mid","mid","_direction","direction","_currentDirection","currentDirection","_stopped","Boolean","isStopped","_sender","sender","_receiver","receiver","_createClass","key","get","set","val","_this","includes","TypeError","Error","oldDirection","transceiverSetDirection","id","catch","value","stop","_this2","transceiverStop","then","_setStopped","default"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/RTCRtpTransceiver.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport RTCRtpReceiver from './RTCRtpReceiver';\nimport RTCRtpSender from './RTCRtpSender';\n\nconst { WebRTCModule } = NativeModules;\n\n\nexport default class RTCRtpTransceiver {\n    _peerConnectionId: number;\n    _sender: RTCRtpSender;\n    _receiver: RTCRtpReceiver;\n\n    _mid: string | null = null;\n    _direction: string;\n    _currentDirection: string;\n    _stopped: boolean;\n\n    constructor(args: {\n        peerConnectionId: number,\n        isStopped: boolean,\n        direction: string,\n        currentDirection: string,\n        mid?: string,\n        sender: RTCRtpSender,\n        receiver: RTCRtpReceiver,\n    }) {\n        this._peerConnectionId = args.peerConnectionId;\n        this._mid = args.mid ? args.mid : null;\n        this._direction = args.direction;\n        this._currentDirection = args.currentDirection;\n        this._stopped = Boolean(args.isStopped);\n        this._sender = args.sender;\n        this._receiver = args.receiver;\n    }\n\n    get mid() {\n        return this._mid;\n    }\n\n    get stopped() {\n        return this._stopped;\n    }\n\n    get direction() {\n        return this._direction;\n    }\n\n    set direction(val) {\n        if (![ 'sendonly', 'recvonly', 'sendrecv', 'inactive' ].includes(val)) {\n            throw new TypeError('Invalid direction provided');\n        }\n\n        if (this._stopped) {\n            throw Error('Transceiver Stopped');\n        }\n\n        if (this._direction === val) {\n            return;\n        }\n\n        const oldDirection = this._direction;\n\n        WebRTCModule.transceiverSetDirection(this._peerConnectionId, this.sender.id, val)\n            .catch(() => {\n                this._direction = oldDirection;\n            });\n\n        this._direction = val;\n    }\n\n    get currentDirection() {\n        return this._currentDirection;\n    }\n\n    get sender() {\n        return this._sender;\n    }\n\n    get receiver() {\n        return this._receiver;\n    }\n\n    stop() {\n        if (this._stopped) {\n            return;\n        }\n\n        WebRTCModule.transceiverStop(this._peerConnectionId, this.sender.id)\n            .then(() => this._setStopped());\n    }\n\n    _setStopped() {\n        this._stopped = true;\n        this._direction = 'stopped';\n        this._currentDirection = 'stopped';\n        this._mid = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}