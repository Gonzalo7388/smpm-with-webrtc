{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar RTCRtpEncodingParameters = function () {\n  function RTCRtpEncodingParameters(init) {\n    _classCallCheck(this, RTCRtpEncodingParameters);\n    var _init$rid, _init$maxBitrate, _init$maxFramerate, _init$scaleResolution;\n    _defineProperty(this, \"active\", void 0);\n    _defineProperty(this, \"_rid\", void 0);\n    _defineProperty(this, \"_maxFramerate\", void 0);\n    _defineProperty(this, \"_maxBitrate\", void 0);\n    _defineProperty(this, \"_scaleResolutionDownBy\", void 0);\n    this.active = init.active;\n    this._rid = (_init$rid = init.rid) !== null && _init$rid !== void 0 ? _init$rid : null;\n    this._maxBitrate = (_init$maxBitrate = init.maxBitrate) !== null && _init$maxBitrate !== void 0 ? _init$maxBitrate : null;\n    this._maxFramerate = (_init$maxFramerate = init.maxFramerate) !== null && _init$maxFramerate !== void 0 ? _init$maxFramerate : null;\n    this._scaleResolutionDownBy = (_init$scaleResolution = init.scaleResolutionDownBy) !== null && _init$scaleResolution !== void 0 ? _init$scaleResolution : null;\n  }\n  return _createClass(RTCRtpEncodingParameters, [{\n    key: \"rid\",\n    get: function get() {\n      return this._rid;\n    }\n  }, {\n    key: \"maxFramerate\",\n    get: function get() {\n      return this._maxFramerate;\n    },\n    set: function set(framerate) {\n      if (framerate != null && framerate > 0) {\n        this._maxFramerate = framerate;\n      } else {\n        this._maxFramerate = null;\n      }\n    }\n  }, {\n    key: \"maxBitrate\",\n    get: function get() {\n      return this._maxBitrate;\n    },\n    set: function set(bitrate) {\n      if (bitrate != null && bitrate >= 0) {\n        this._maxBitrate = bitrate;\n      } else {\n        this._maxBitrate = null;\n      }\n    }\n  }, {\n    key: \"scaleResolutionDownBy\",\n    get: function get() {\n      return this._scaleResolutionDownBy;\n    },\n    set: function set(resolutionScale) {\n      if (resolutionScale != null && resolutionScale >= 1) {\n        this._scaleResolutionDownBy = resolutionScale;\n      } else {\n        this._scaleResolutionDownBy = null;\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var obj = {\n        active: this.active\n      };\n      if (this._rid !== null) {\n        obj['rid'] = this._rid;\n      }\n      if (this._maxBitrate !== null) {\n        obj['maxBitrate'] = this._maxBitrate;\n      }\n      if (this._maxFramerate !== null) {\n        obj['maxFramerate'] = this._maxFramerate;\n      }\n      if (this._scaleResolutionDownBy !== null) {\n        obj['scaleResolutionDownBy'] = this._scaleResolutionDownBy;\n      }\n      return obj;\n    }\n  }]);\n}();\nexport { RTCRtpEncodingParameters as default };","map":{"version":3,"names":["RTCRtpEncodingParameters","init","_classCallCheck","_init$rid","_init$maxBitrate","_init$maxFramerate","_init$scaleResolution","_defineProperty","active","_rid","rid","_maxBitrate","maxBitrate","_maxFramerate","maxFramerate","_scaleResolutionDownBy","scaleResolutionDownBy","_createClass","key","get","set","framerate","bitrate","resolutionScale","value","toJSON","obj","default"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/RTCRtpEncodingParameters.ts"],"sourcesContent":["export interface RTCRtpEncodingParametersInit {\n    active: boolean,\n    rid?: string;\n    maxFramerate?: number;\n    maxBitrate?: number;\n    scaleResolutionDownBy?: number;\n}\n\nexport default class RTCRtpEncodingParameters {\n    active: boolean;\n    _rid: string | null;\n    _maxFramerate: number | null;\n    _maxBitrate: number | null;\n    _scaleResolutionDownBy: number | null;\n\n    constructor(init: RTCRtpEncodingParametersInit) {\n        this.active = init.active;\n        this._rid = init.rid ?? null;\n        this._maxBitrate = init.maxBitrate ?? null;\n        this._maxFramerate = init.maxFramerate ?? null;\n        this._scaleResolutionDownBy = init.scaleResolutionDownBy ?? null;\n    }\n\n    get rid() {\n        return this._rid;\n    }\n\n    get maxFramerate() {\n        return this._maxFramerate;\n    }\n\n    set maxFramerate(framerate) {\n        // eslint-disable-next-line eqeqeq\n        if (framerate != null && framerate > 0) {\n            this._maxFramerate = framerate;\n        } else {\n            this._maxFramerate = null;\n        }\n    }\n\n    get maxBitrate() {\n        return this._maxBitrate;\n    }\n\n    set maxBitrate(bitrate) {\n        // eslint-disable-next-line eqeqeq\n        if (bitrate != null && bitrate >= 0) {\n            this._maxBitrate = bitrate;\n        } else {\n            this._maxBitrate = null;\n        }\n    }\n\n    get scaleResolutionDownBy() {\n        return this._scaleResolutionDownBy;\n    }\n\n    set scaleResolutionDownBy(resolutionScale) {\n        // eslint-disable-next-line eqeqeq\n        if (resolutionScale != null && resolutionScale >= 1) {\n            this._scaleResolutionDownBy = resolutionScale;\n        } else {\n            this._scaleResolutionDownBy = null;\n        }\n    }\n\n    toJSON(): RTCRtpEncodingParametersInit {\n        const obj = {\n            active: this.active,\n        };\n\n        if (this._rid !== null) {\n            obj['rid'] = this._rid;\n        }\n\n        if (this._maxBitrate !== null) {\n            obj['maxBitrate'] = this._maxBitrate;\n        }\n\n        if (this._maxFramerate !== null) {\n            obj['maxFramerate'] = this._maxFramerate;\n        }\n\n        if (this._scaleResolutionDownBy !== null) {\n            obj['scaleResolutionDownBy'] = this._scaleResolutionDownBy;\n        }\n\n        return obj;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;IAQqBA,wBAAN;EAOX,SAAAA,yBAAYC,IAAD,EAAqC;IAAAC,eAAA,OAAAF,wBAAA;IAAA,IAAAG,SAAA,EAAAC,gBAAA,EAAAC,kBAAA,EAAAC,qBAAA;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAC5C,KAAKC,MAAL,GAAcP,IAAI,CAACO,MAAnB;IACA,KAAKC,IAAL,IAAAN,SAAA,GAAYF,IAAI,CAACS,GAAjB,cAAAP,SAAA,cAAAA,SAAA,GAAwB,IAAxB;IACA,KAAKQ,WAAL,IAAAP,gBAAA,GAAmBH,IAAI,CAACW,UAAxB,cAAAR,gBAAA,cAAAA,gBAAA,GAAsC,IAAtC;IACA,KAAKS,aAAL,IAAAR,kBAAA,GAAqBJ,IAAI,CAACa,YAA1B,cAAAT,kBAAA,cAAAA,kBAAA,GAA0C,IAA1C;IACA,KAAKU,sBAAL,IAAAT,qBAAA,GAA8BL,IAAI,CAACe,qBAAnC,cAAAV,qBAAA,cAAAA,qBAAA,GAA4D,IAA5D;EACH;EAAA,OAAAW,YAAA,CAAAjB,wBAAA;IAAAkB,GAAA;IAAAC,GAAA,EAEM,SAAAA,IAAA,EAAG;MACN,OAAO,KAAKV,IAAZ;IACH;EAAA;IAAAS,GAAA;IAAAC,GAAA,EAEe,SAAAA,IAAA,EAAG;MACf,OAAO,KAAKN,aAAZ;IACH;IAAAO,GAAA,EAEe,SAAAA,IAACC,SAAD,EAAY;MAExB,IAAIA,SAAS,IAAI,IAAb,IAAqBA,SAAS,GAAG,CAArC,EAAwC;QACpC,KAAKR,aAAL,GAAqBQ,SAArB;MACH,CAFD,MAEO;QACH,KAAKR,aAAL,GAAqB,IAArB;MACH;IACJ;EAAA;IAAAK,GAAA;IAAAC,GAAA,EAEa,SAAAA,IAAA,EAAG;MACb,OAAO,KAAKR,WAAZ;IACH;IAAAS,GAAA,EAEa,SAAAA,IAACE,OAAD,EAAU;MAEpB,IAAIA,OAAO,IAAI,IAAX,IAAmBA,OAAO,IAAI,CAAlC,EAAqC;QACjC,KAAKX,WAAL,GAAmBW,OAAnB;MACH,CAFD,MAEO;QACH,KAAKX,WAAL,GAAmB,IAAnB;MACH;IACJ;EAAA;IAAAO,GAAA;IAAAC,GAAA,EAEwB,SAAAA,IAAA,EAAG;MACxB,OAAO,KAAKJ,sBAAZ;IACH;IAAAK,GAAA,EAEwB,SAAAA,IAACG,eAAD,EAAkB;MAEvC,IAAIA,eAAe,IAAI,IAAnB,IAA2BA,eAAe,IAAI,CAAlD,EAAqD;QACjD,KAAKR,sBAAL,GAA8BQ,eAA9B;MACH,CAFD,MAEO;QACH,KAAKR,sBAAL,GAA8B,IAA9B;MACH;IACJ;EAAA;IAAAG,GAAA;IAAAM,KAAA,EAED,SAAAC,MAAMA,CAAA,EAAiC;MACnC,IAAMC,GAAG,GAAG;QACRlB,MAAM,EAAE,KAAKA;MADL,CAAZ;MAIA,IAAI,KAAKC,IAAL,KAAc,IAAlB,EAAwB;QACpBiB,GAAG,CAAC,KAAD,CAAH,GAAa,KAAKjB,IAAlB;MACH;MAED,IAAI,KAAKE,WAAL,KAAqB,IAAzB,EAA+B;QAC3Be,GAAG,CAAC,YAAD,CAAH,GAAoB,KAAKf,WAAzB;MACH;MAED,IAAI,KAAKE,aAAL,KAAuB,IAA3B,EAAiC;QAC7Ba,GAAG,CAAC,cAAD,CAAH,GAAsB,KAAKb,aAA3B;MACH;MAED,IAAI,KAAKE,sBAAL,KAAgC,IAApC,EAA0C;QACtCW,GAAG,CAAC,uBAAD,CAAH,GAA+B,KAAKX,sBAApC;MACH;MAED,OAAOW,GAAP;IACH;EAAA;AAAA;AAAA,SAhFgB1B,wBAAN,IAAA2B,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}