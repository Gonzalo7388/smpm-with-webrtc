{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport MediaStreamTrack from \"./MediaStreamTrack\";\nimport { uniqueID } from \"./RTCUtil\";\nvar WebRTCModule = NativeModules.WebRTCModule;\nvar MEDIA_STREAM_EVENTS = ['active', 'inactive', 'addtrack', 'removetrack'];\nvar MediaStream = function (_defineCustomEventTar) {\n  function MediaStream(arg) {\n    var _this;\n    _classCallCheck(this, MediaStream);\n    _this = _callSuper(this, MediaStream);\n    _defineProperty(_this, \"id\", void 0);\n    _defineProperty(_this, \"active\", true);\n    _defineProperty(_this, \"_tracks\", []);\n    _defineProperty(_this, \"_reactTag\", void 0);\n    _this.id = uniqueID();\n    _this._reactTag = _this.id;\n    if (typeof arg === 'undefined') {\n      WebRTCModule.mediaStreamCreate(_this.id);\n    } else if (arg instanceof MediaStream) {\n      WebRTCModule.mediaStreamCreate(_this.id);\n      for (var track of arg.getTracks()) {\n        _this.addTrack(track);\n      }\n    } else if (Array.isArray(arg)) {\n      WebRTCModule.mediaStreamCreate(_this.id);\n      for (var _track of arg) {\n        _this.addTrack(_track);\n      }\n    } else if (typeof arg === 'object' && arg.streamId && arg.streamReactTag && arg.tracks) {\n      _this.id = arg.streamId;\n      _this._reactTag = arg.streamReactTag;\n      for (var trackInfo of arg.tracks) {\n        _this._tracks.push(new MediaStreamTrack(trackInfo));\n      }\n    } else {\n      throw new TypeError(\"invalid type: \" + typeof arg);\n    }\n    return _this;\n  }\n  _inherits(MediaStream, _defineCustomEventTar);\n  return _createClass(MediaStream, [{\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      var index = this._tracks.indexOf(track);\n      if (index !== -1) {\n        return;\n      }\n      this._tracks.push(track);\n      WebRTCModule.mediaStreamAddTrack(this._reactTag, track.id);\n    }\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      var index = this._tracks.indexOf(track);\n      if (index === -1) {\n        return;\n      }\n      this._tracks.splice(index, 1);\n      WebRTCModule.mediaStreamRemoveTrack(this._reactTag, track.id);\n    }\n  }, {\n    key: \"getTracks\",\n    value: function getTracks() {\n      return this._tracks.slice();\n    }\n  }, {\n    key: \"getTrackById\",\n    value: function getTrackById(trackId) {\n      return this._tracks.find(function (track) {\n        return track.id === trackId;\n      });\n    }\n  }, {\n    key: \"getAudioTracks\",\n    value: function getAudioTracks() {\n      return this._tracks.filter(function (track) {\n        return track.kind === 'audio';\n      });\n    }\n  }, {\n    key: \"getVideoTracks\",\n    value: function getVideoTracks() {\n      return this._tracks.filter(function (track) {\n        return track.kind === 'video';\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      throw new Error('Not implemented.');\n    }\n  }, {\n    key: \"toURL\",\n    value: function toURL() {\n      return this._reactTag;\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      var releaseTracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var tracks = _toConsumableArray(this._tracks);\n      for (var track of tracks) {\n        this.removeTrack(track);\n        if (releaseTracks) {\n          track.release();\n        }\n      }\n      WebRTCModule.mediaStreamRelease(this._reactTag);\n    }\n  }]);\n}(defineCustomEventTarget.apply(void 0, MEDIA_STREAM_EVENTS));\nexport { MediaStream as default };","map":{"version":3,"names":["defineCustomEventTarget","NativeModules","MediaStreamTrack","uniqueID","WebRTCModule","MEDIA_STREAM_EVENTS","MediaStream","_defineCustomEventTar","arg","_this","_classCallCheck","_callSuper","_defineProperty","id","_reactTag","mediaStreamCreate","track","getTracks","addTrack","Array","isArray","streamId","streamReactTag","tracks","trackInfo","_tracks","push","TypeError","_inherits","_createClass","key","value","index","indexOf","mediaStreamAddTrack","removeTrack","splice","mediaStreamRemoveTrack","slice","getTrackById","trackId","find","getAudioTracks","filter","kind","getVideoTracks","clone","Error","toURL","release","releaseTracks","arguments","length","undefined","_toConsumableArray","mediaStreamRelease","apply","default"],"sources":["/workspaces/smpm-with-webrtc/node_modules/react-native-webrtc/lib/module/MediaStream.ts"],"sourcesContent":["\nimport { defineCustomEventTarget } from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport MediaStreamTrack from './MediaStreamTrack';\nimport { uniqueID } from './RTCUtil';\n\nconst { WebRTCModule } = NativeModules;\n\nconst MEDIA_STREAM_EVENTS = [ 'active', 'inactive', 'addtrack', 'removetrack' ];\n\nexport default class MediaStream extends defineCustomEventTarget(...MEDIA_STREAM_EVENTS) {\n    id: string;\n    active = true;\n\n    _tracks: MediaStreamTrack[] = [];\n\n    /**\n     * The identifier of this MediaStream unique within the associated\n     * WebRTCModule instance. As the id of a remote MediaStream instance is unique\n     * only within the associated RTCPeerConnection, it is not sufficiently unique\n     * to identify this MediaStream across multiple RTCPeerConnections and to\n     * unambiguously differentiate it from a local MediaStream instance not added\n     * to an RTCPeerConnection.\n     */\n    _reactTag: string;\n\n    /**\n     * A MediaStream can be constructed in several ways, depending on the parameters\n     * that are passed here.\n     *\n     * - undefined: just a new stream, with no tracks.\n     * - MediaStream instance: a new stream, with a copy of the tracks of the passed stream.\n     * - Array of MediaStreamTrack: a new stream with a copy of the tracks in the array.\n     * - object: a new stream instance, represented by the passed info object, this is always\n     *   done internally, when the stream is first created in native and the JS wrapper is\n     *   built afterwards.\n     */\n    constructor(arg) {\n        super();\n\n        // Assigm a UUID to start with. It may get overridden for remote streams.\n        this.id = uniqueID();\n        // Local MediaStreams are created by WebRTCModule to have their id and\n        // reactTag equal because WebRTCModule follows the respective standard's\n        // recommendation for id generation i.e. uses UUID which is unique enough\n        // for the purposes of reactTag.\n        this._reactTag = this.id;\n\n        if (typeof arg === 'undefined') {\n            WebRTCModule.mediaStreamCreate(this.id);\n        } else if (arg instanceof MediaStream) {\n            WebRTCModule.mediaStreamCreate(this.id);\n\n            for (const track of arg.getTracks()) {\n                this.addTrack(track);\n            }\n        } else if (Array.isArray(arg)) {\n            WebRTCModule.mediaStreamCreate(this.id);\n\n            for (const track of arg) {\n                this.addTrack(track);\n            }\n        } else if (typeof arg === 'object' && arg.streamId && arg.streamReactTag && arg.tracks) {\n            this.id = arg.streamId;\n            this._reactTag = arg.streamReactTag;\n\n            for (const trackInfo of arg.tracks) {\n                // We are not using addTrack here because the track is already part of the\n                // stream, so there is no need to add it on the native side.\n                this._tracks.push(new MediaStreamTrack(trackInfo));\n            }\n        } else {\n            throw new TypeError(`invalid type: ${typeof arg}`);\n        }\n    }\n\n    addTrack(track: MediaStreamTrack): void {\n        const index = this._tracks.indexOf(track);\n\n        if (index !== -1) {\n            return;\n        }\n\n        this._tracks.push(track);\n        WebRTCModule.mediaStreamAddTrack(this._reactTag, track.id);\n    }\n\n    removeTrack(track: MediaStreamTrack): void {\n        const index = this._tracks.indexOf(track);\n\n        if (index === -1) {\n            return;\n        }\n\n        this._tracks.splice(index, 1);\n        WebRTCModule.mediaStreamRemoveTrack(this._reactTag, track.id);\n    }\n\n    getTracks(): MediaStreamTrack[] {\n        return this._tracks.slice();\n    }\n\n    getTrackById(trackId): MediaStreamTrack | undefined {\n        return this._tracks.find(track => track.id === trackId);\n    }\n\n    getAudioTracks(): MediaStreamTrack[] {\n        return this._tracks.filter(track => track.kind === 'audio');\n    }\n\n    getVideoTracks(): MediaStreamTrack[] {\n        return this._tracks.filter(track => track.kind === 'video');\n    }\n\n    clone(): never {\n        throw new Error('Not implemented.');\n    }\n\n    toURL(): string {\n        return this._reactTag;\n    }\n\n    release(releaseTracks = true): void {\n        const tracks = [ ...this._tracks ];\n\n        for (const track of tracks) {\n            this.removeTrack(track);\n\n            if (releaseTracks) {\n                track.release();\n            }\n        }\n\n        WebRTCModule.mediaStreamRelease(this._reactTag);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}